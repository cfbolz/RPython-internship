Premiere semaine

- Premiere approche de RPython et de Pypy (presentation en début de nouvelle semaine)
- Tests, ecriture d'un premier interprete pour un tout petit langage (AE)
- Cours sur la continuation

Defintion des objectifs
- Comparer en matrice le comportement de Pypy selon
  *abscisse :  CPython, interprete Pypy, Translated, Translated with JIT
  *ordonnée : interpete sur AST (récursif), version CPS, version CPS + Trampoline 

Deuxieme semaine:

Objectif initial:
Ecrire l'interprete du langage F1WAE
(with + fonction a 1 parametre)
Tester ses performances et jouer avec RPython
-> Regarder les optimisations du code pour accélérer le JIT

Obj secondaire: trouver le code C généré, l'analyser

Rq: en ecrivant l'interpreteur: F1WAE: garder une programmation naive
pour eviter les desagrements (par exemple, ne pas utiliser les appels
par defaut en cas de manque d'argument dans une methode)

mercredi 13 juin:
interpret F1WAE a priori termine.
(teste sur des cas de substitution limite, sur de la profondeur et sur
quelques formes d'erreur, semble convaincant)

Passons a la translation
Ai ecris un fichier d'ecriture d'exemple (sans fonction)
ai fait tourne les differentes version sur des exemples de plus en plus compliques

il en ressort que pypy et + de 2x plus rapide que python et que les version traduite donnent un gain d'environ 5 sur pypy intereprete

par contre le jiting semble ralentir tres legerement (5ms sur 1s20) sur les plus gros exemples

deux hypothese:
jit annotations erronees
ou langages pas assez expressif pour un gain reel au jit

tenter l'optimisation?
regarder les traces d'abord, verifier que j'ai bien fait le truc

autre possibilite: jit ineffectif sur parcours recursif!

15/06

Jit version a bien merdé sur des exemples introduisant des
déclarations de fonctions. La version simplement translated est de 8 à
20 fois plus rapide sur des exemples un peu gros.

Une possibilité: le check du JIT sur les paramètres prend énormément
de temps.

Abandon de la version lazy et F1WAE

Nouvelle version ifF1WAE avec un if pour pouvoir faire des exemples
plus probants. (récursifs)
Eager.

Prochaine étape: cps
Dans un premier temps, sous forme fonctionelle, ensuite sous forme de
frame.
Obj: arriver à du pur itératif.

20/06
Interpret cps ecrit, pret en jiting or not.
problem: sur gros exemples, stack overflow no matter jiting or not
recursive version jiting fait aussi du stack overflow
J'ai ecrit une version en remplacant tous les raise par des assert -> plus de bug (en tout cas sur test10000runs2000) pour la recursive, les deux cps toujours plantees
